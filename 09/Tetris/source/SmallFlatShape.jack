
class SmallFlatShape {

    field Array squares;
    field int _size;
    field bool justCreated;
    field IShape iShape;
    field bool vertical;

    constructor SmallFlatShape new(int size){
        let vertical = false;
        let _size = size;
        let justCreated = true;
        let iShape = IShape.new(_size, getSegmentsCount());
        let squares = iShape.GetSquares(); 

        return this;
    }

    method void draw(){
        do iShape.draw();
         return;
    }

    method void setCoordinates(int x, int y){
        var SimpleSquare smpl;
        var Point2d pnt;  
        var int i;

        let i = 0;

        if(~vertical){
            while (i < 2) {
                let smpl = squares[i];
                do smpl.setCoordinates(x + (_size * i), y);           
                let i = i + 1;
            }   
        }

        if(vertical) {  
            let smpl = squares[0];
            let pnt = smpl.getCoordinates();
            do smpl.setCoordinates(x + (1 * _size), y - (1 * _size));

            let smpl = squares[1];
            let pnt = smpl.getCoordinates();
            do smpl.setCoordinates(x + (1 * _size), y);
        }

        return;
    }

    method void rotate(){
        var SimpleSquare smpl;
        var Point2d pnt;  
        var bool elsee;
        let elsee = true;  

        if (vertical) {
            let vertical = false;
            let smpl = squares[0];
            let pnt = smpl.getCoordinates();
            do setCoordinates(pnt.getX() - (1 * _size), pnt.getY() + (1 * _size));
            let elsee = false;  
        }
        if (elsee) {
            let vertical = true;
            let smpl = squares[0];
            let pnt = smpl.getCoordinates();
            do setCoordinates(pnt.getX(), pnt.getY());          
        }

        return;
    }

    method void rotateBack(){
        do rotate();
        return;
    }

    method int getSegmentsCount(){
        return 2;
    }

    method Array getCoordinates(){
        var Array points;

        let points = iShape.getCoordinates();

        return points;
    }

    method void dispose() {
        do iShape.dispose();
        do Memory.deAlloc(this);  // uses an OS routine to recycle the memory held by the object
        return;
    }
}