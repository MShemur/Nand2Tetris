// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux(a=false, b=instruction[0], sel=instruction[15], out=j3);
    Mux(a=false, b=instruction[1], sel=instruction[15], out=j2);
    Mux(a=false, b=instruction[2], sel=instruction[15], out=j1);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=destM);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=destD);
    Mux(a=false, b=instruction[5], sel=instruction[15], out=destA);
    Mux(a=false, b=instruction[6], sel=instruction[15], out=comp6);
    Mux(a=false, b=instruction[7], sel=instruction[15], out=comp5);
    Mux(a=false, b=instruction[8], sel=instruction[15], out=comp4);
    Mux(a=false, b=instruction[9], sel=instruction[15], out=comp3);
    Mux(a=false, b=instruction[10], sel=instruction[15], out=comp2);
    Mux(a=false, b=instruction[11], sel=instruction[15], out=comp1);
    Mux(a=false, b=instruction[12], sel=instruction[15], out=IfMorA);

    ///С инструкция и дестА=1
    //  или это А инструция
    Not(in=instruction[15], out=IsAddress);
    And(a=instruction[15], b=destA, out=IsDestA);
    Or(a=IsAddress, b=IsDestA, out=writeA);

    ALU(x=outD, y=MorA, zx=comp1, nx=comp2, zy=comp3, ny=comp4, f=comp5, no=comp6, out=outM, zr=Zero, ng=Negative, out=outMM);
    Mux16(a=instruction, b=outMM, sel=instruction[15], out=outToA);
    ARegister(in=outToA, load=writeA, out=outA, out[0..14]=addressM);
    DRegister(in=outMM, load=destD, out=outD);

    Mux16(a=outA, b=inM, sel=IfMorA, out=MorA);

    And(a=true, b=destM, out=writeM);


/////
And(a=j1, b=j2, out=j1Andj2);
And(a=j2, b=j3, out=j2Andj3);
And(a=j1, b=j3, out=j1Andj3);
And(a=Positive, b=NotZero, out=greaterThanZero);
And(a=Negative, b=NotZero, out=lessThanZero);
Or(a=Positive, b=Zero, out=greaterEqualZero);
Or(a=Negative, b=Zero, out=lessEqualZero);
And(a=true, b=Zero, out=equalZero);
And(a=true, b=NotZero, out=NotEqualZero);


///if no jump
Or(a=j1, b=j2, out=j1Orj2);
Or(a=j3, b=j1Orj2, out=haveJump);
Not(in=haveJump, out=noJump);
Not(in=noJump, out=NotNoJump);

Not(in=Negative, out=Positive);
Not(in=Zero, out=NotZero);

And(a=Negative, b=j1, out=jumpOne);
And(a=Zero, b=j2, out=jumpTwo);
And(a=greaterThanZero, b=j3, out=jumpThree);
And(a=j1Andj2, b=lessEqualZero, out=jumpFour);
And(a=j2Andj3, b=greaterEqualZero, out=jumpFive);
And(a=j1Andj3, b=NotEqualZero, out=jumpFSix);
And(a=j1Andj2, b=j2Andj3, out=justjump);

Or8Way(in[0]=jumpOne,in[1]=jumpTwo,in[2]=jumpThree,in[3]=jumpFour,in[4]=jumpFive,in[5]=jumpFSix,in[6]=justjump,in[7]=false, out=loadToPCOnChecking);
And(a=loadToPCOnChecking, b=NotNoJump, out=loadToPC);
PC(in=outA, load=loadToPC, inc=true, reset=reset, out[0..14]=pc);

}